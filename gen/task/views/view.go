// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task views
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Taskdetail is the viewed result type that is projected based on a view.
type Taskdetail struct {
	// Type to project
	Projected *TaskdetailView
	// View to render
	View string
}

// TaskdetailCollection is the viewed result type that is projected based on a
// view.
type TaskdetailCollection struct {
	// Type to project
	Projected TaskdetailCollectionView
	// View to render
	View string
}

// TaskdetailView is a type that runs validations on a projected type.
type TaskdetailView struct {
	// The ID of the task
	ID *string
	// The parent ID of the task
	ParentID *string
	// The title of the task
	Title *string
	// The status of the task
	Status *string
	// Whether the task is a leaf task
	IsLeaf *bool
	// The order of the task
	Order *float64
	// The timestamp when the task was created
	CreatedAt *int64
	// The timestamp when the task was completed
	CompletedAt *int64
	// The timestamp when the task was started
	StartedAt *int64
	// The lead time of the task
	LeadTime *int64
	// The estimated time of the task
	EstimatedTime *int64
	// The actual time of the task
	ActualTime *int64
}

// TaskdetailCollectionView is a type that runs validations on a projected type.
type TaskdetailCollectionView []*TaskdetailView

var (
	// TaskdetailMap is a map indexing the attribute names of Taskdetail by view
	// name.
	TaskdetailMap = map[string][]string{
		"default": {
			"id",
			"parent_id",
			"title",
			"status",
			"is_leaf",
			"order",
			"created_at",
			"completed_at",
			"started_at",
			"lead_time",
			"estimated_time",
			"actual_time",
		},
	}
	// TaskdetailCollectionMap is a map indexing the attribute names of
	// TaskdetailCollection by view name.
	TaskdetailCollectionMap = map[string][]string{
		"default": {
			"id",
			"parent_id",
			"title",
			"status",
			"is_leaf",
			"order",
			"created_at",
			"completed_at",
			"started_at",
			"lead_time",
			"estimated_time",
			"actual_time",
		},
	}
)

// ValidateTaskdetail runs the validations defined on the viewed result type
// Taskdetail.
func ValidateTaskdetail(result *Taskdetail) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTaskdetailView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTaskdetailCollection runs the validations defined on the viewed
// result type TaskdetailCollection.
func ValidateTaskdetailCollection(result TaskdetailCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTaskdetailCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTaskdetailView runs the validations defined on TaskdetailView using
// the "default" view.
func ValidateTaskdetailView(result *TaskdetailView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "result"))
	}
	return
}

// ValidateTaskdetailCollectionView runs the validations defined on
// TaskdetailCollectionView using the "default" view.
func ValidateTaskdetailCollectionView(result TaskdetailCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTaskdetailView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
