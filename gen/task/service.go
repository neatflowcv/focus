// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task service
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package task

import (
	"context"

	taskviews "github.com/neatflowcv/focus/gen/task/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the task service interface.
type Service interface {
	// Setup the task service.
	Setup(context.Context, *SetupTaskInput) (err error)
	// Create a new task.
	Create(context.Context, *CreateTaskInput) (res *Createtaskoutput, err error)
	// List all tasks.
	List(context.Context, *ListPayload) (res TaskdetailCollection, err error)
	// Update a task.
	Update(context.Context, *TaskUpdateInput) (res *Taskdetail, err error)
	// Delete a task.
	Delete(context.Context, *TaskDeleteInput) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "focus"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "task"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"setup", "create", "list", "update", "delete"}

// CreateTaskInput is the payload type of the task service create method.
type CreateTaskInput struct {
	// The authorization header
	Authorization string
	// The parent ID of the task
	ParentID *string
	// The title of the task
	Title string
}

// Createtaskoutput is the result type of the task service create method.
type Createtaskoutput struct {
	// The ID of the task
	ID string
	// The parent ID of the task
	ParentID *string
	// The title of the task
	Title string
	// The timestamp when the task was created
	CreatedAt int64
}

// ListPayload is the payload type of the task service list method.
type ListPayload struct {
	// The authorization header
	Authorization string
	// The ID of the parent task
	ParentID *string
	// Whether to include all subtasks recursively
	Recursive *bool
}

// SetupTaskInput is the payload type of the task service setup method.
type SetupTaskInput struct {
	// The authorization header
	Authorization string
}

// TaskDeleteInput is the payload type of the task service delete method.
type TaskDeleteInput struct {
	// The authorization header
	Authorization string
	// The ID of the task
	TaskID string
}

// TaskUpdateInput is the payload type of the task service update method.
type TaskUpdateInput struct {
	// The authorization header
	Authorization string
	// The ID of the task
	TaskID string
	// The title of the task
	Title *string
	// The parent ID of the task
	ParentID *string
	// The next ID of the task
	NextID *string
	// The status of the task
	Status *string
	// The estimated time of the task
	EstimatedTime *int64
}

// Taskdetail is the result type of the task service update method.
type Taskdetail struct {
	// The ID of the task
	ID string
	// The parent ID of the task
	ParentID *string
	// The title of the task
	Title string
	// The status of the task
	Status string
	// Whether the task is a leaf task
	IsLeaf *bool
	// The timestamp when the task was created
	CreatedAt int64
	// The timestamp when the task was completed
	CompletedAt *int64
	// The timestamp when the task was started
	StartedAt *int64
	// The lead time of the task
	LeadTime *int64
	// The estimated time of the task
	EstimatedTime *int64
	// The actual time of the task
	ActualTime *int64
}

// TaskdetailCollection is the result type of the task service list method.
type TaskdetailCollection []*Taskdetail

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalServerError", false, false, false)
}

// MakeTaskNotFound builds a goa.ServiceError from an error.
func MakeTaskNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "TaskNotFound", false, false, false)
}

// NewCreatetaskoutput initializes result type Createtaskoutput from viewed
// result type Createtaskoutput.
func NewCreatetaskoutput(vres *taskviews.Createtaskoutput) *Createtaskoutput {
	return newCreatetaskoutput(vres.Projected)
}

// NewViewedCreatetaskoutput initializes viewed result type Createtaskoutput
// from result type Createtaskoutput using the given view.
func NewViewedCreatetaskoutput(res *Createtaskoutput, view string) *taskviews.Createtaskoutput {
	p := newCreatetaskoutputView(res)
	return &taskviews.Createtaskoutput{Projected: p, View: "default"}
}

// NewTaskdetailCollection initializes result type TaskdetailCollection from
// viewed result type TaskdetailCollection.
func NewTaskdetailCollection(vres taskviews.TaskdetailCollection) TaskdetailCollection {
	return newTaskdetailCollection(vres.Projected)
}

// NewViewedTaskdetailCollection initializes viewed result type
// TaskdetailCollection from result type TaskdetailCollection using the given
// view.
func NewViewedTaskdetailCollection(res TaskdetailCollection, view string) taskviews.TaskdetailCollection {
	p := newTaskdetailCollectionView(res)
	return taskviews.TaskdetailCollection{Projected: p, View: "default"}
}

// NewTaskdetail initializes result type Taskdetail from viewed result type
// Taskdetail.
func NewTaskdetail(vres *taskviews.Taskdetail) *Taskdetail {
	return newTaskdetail(vres.Projected)
}

// NewViewedTaskdetail initializes viewed result type Taskdetail from result
// type Taskdetail using the given view.
func NewViewedTaskdetail(res *Taskdetail, view string) *taskviews.Taskdetail {
	p := newTaskdetailView(res)
	return &taskviews.Taskdetail{Projected: p, View: "default"}
}

// newCreatetaskoutput converts projected type Createtaskoutput to service type
// Createtaskoutput.
func newCreatetaskoutput(vres *taskviews.CreatetaskoutputView) *Createtaskoutput {
	res := &Createtaskoutput{
		ParentID: vres.ParentID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newCreatetaskoutputView projects result type Createtaskoutput to projected
// type CreatetaskoutputView using the "default" view.
func newCreatetaskoutputView(res *Createtaskoutput) *taskviews.CreatetaskoutputView {
	vres := &taskviews.CreatetaskoutputView{
		ID:        &res.ID,
		ParentID:  res.ParentID,
		Title:     &res.Title,
		CreatedAt: &res.CreatedAt,
	}
	return vres
}

// newTaskdetailCollection converts projected type TaskdetailCollection to
// service type TaskdetailCollection.
func newTaskdetailCollection(vres taskviews.TaskdetailCollectionView) TaskdetailCollection {
	res := make(TaskdetailCollection, len(vres))
	for i, n := range vres {
		res[i] = newTaskdetail(n)
	}
	return res
}

// newTaskdetailCollectionView projects result type TaskdetailCollection to
// projected type TaskdetailCollectionView using the "default" view.
func newTaskdetailCollectionView(res TaskdetailCollection) taskviews.TaskdetailCollectionView {
	vres := make(taskviews.TaskdetailCollectionView, len(res))
	for i, n := range res {
		vres[i] = newTaskdetailView(n)
	}
	return vres
}

// newTaskdetail converts projected type Taskdetail to service type Taskdetail.
func newTaskdetail(vres *taskviews.TaskdetailView) *Taskdetail {
	res := &Taskdetail{
		ParentID:      vres.ParentID,
		IsLeaf:        vres.IsLeaf,
		CompletedAt:   vres.CompletedAt,
		StartedAt:     vres.StartedAt,
		LeadTime:      vres.LeadTime,
		EstimatedTime: vres.EstimatedTime,
		ActualTime:    vres.ActualTime,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newTaskdetailView projects result type Taskdetail to projected type
// TaskdetailView using the "default" view.
func newTaskdetailView(res *Taskdetail) *taskviews.TaskdetailView {
	vres := &taskviews.TaskdetailView{
		ID:            &res.ID,
		ParentID:      res.ParentID,
		Title:         &res.Title,
		Status:        &res.Status,
		IsLeaf:        res.IsLeaf,
		CreatedAt:     &res.CreatedAt,
		CompletedAt:   res.CompletedAt,
		StartedAt:     res.StartedAt,
		LeadTime:      res.LeadTime,
		EstimatedTime: res.EstimatedTime,
		ActualTime:    res.ActualTime,
	}
	return vres
}
