// Code generated by goa v3.22.5, DO NOT EDIT.
//
// focus HTTP client CLI support package
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	taskc "github.com/neatflowcv/focus/gen/http/task/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"task (create|list|update|delete)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` task create --body '{
      "parent_id": "Odio aut enim saepe voluptatem.",
      "title": "Error odio corporis animi praesentium quasi."
   }' --authorization "Quae asperiores."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		taskFlags = flag.NewFlagSet("task", flag.ContinueOnError)

		taskCreateFlags             = flag.NewFlagSet("create", flag.ExitOnError)
		taskCreateBodyFlag          = taskCreateFlags.String("body", "REQUIRED", "")
		taskCreateAuthorizationFlag = taskCreateFlags.String("authorization", "REQUIRED", "")

		taskListFlags             = flag.NewFlagSet("list", flag.ExitOnError)
		taskListParentIDFlag      = taskListFlags.String("parent-id", "", "")
		taskListRecursiveFlag     = taskListFlags.String("recursive", "", "")
		taskListAuthorizationFlag = taskListFlags.String("authorization", "REQUIRED", "")

		taskUpdateFlags             = flag.NewFlagSet("update", flag.ExitOnError)
		taskUpdateBodyFlag          = taskUpdateFlags.String("body", "REQUIRED", "")
		taskUpdateTaskIDFlag        = taskUpdateFlags.String("task-id", "REQUIRED", "The ID of the task")
		taskUpdateAuthorizationFlag = taskUpdateFlags.String("authorization", "REQUIRED", "")

		taskDeleteFlags             = flag.NewFlagSet("delete", flag.ExitOnError)
		taskDeleteTaskIDFlag        = taskDeleteFlags.String("task-id", "REQUIRED", "The ID of the task")
		taskDeleteAuthorizationFlag = taskDeleteFlags.String("authorization", "REQUIRED", "")
	)
	taskFlags.Usage = taskUsage
	taskCreateFlags.Usage = taskCreateUsage
	taskListFlags.Usage = taskListUsage
	taskUpdateFlags.Usage = taskUpdateUsage
	taskDeleteFlags.Usage = taskDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "task":
			svcf = taskFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "task":
			switch epn {
			case "create":
				epf = taskCreateFlags

			case "list":
				epf = taskListFlags

			case "update":
				epf = taskUpdateFlags

			case "delete":
				epf = taskDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "task":
			c := taskc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = taskc.BuildCreatePayload(*taskCreateBodyFlag, *taskCreateAuthorizationFlag)
			case "list":
				endpoint = c.List()
				data, err = taskc.BuildListPayload(*taskListParentIDFlag, *taskListRecursiveFlag, *taskListAuthorizationFlag)
			case "update":
				endpoint = c.Update()
				data, err = taskc.BuildUpdatePayload(*taskUpdateBodyFlag, *taskUpdateTaskIDFlag, *taskUpdateAuthorizationFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = taskc.BuildDeletePayload(*taskDeleteTaskIDFlag, *taskDeleteAuthorizationFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// taskUsage displays the usage of the task command and its subcommands.
func taskUsage() {
	fmt.Fprintln(os.Stderr, `Service is the task service interface.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] task COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create: Create a new task.`)
	fmt.Fprintln(os.Stderr, `    list: List all tasks.`)
	fmt.Fprintln(os.Stderr, `    update: Update a task.`)
	fmt.Fprintln(os.Stderr, `    delete: Delete a task.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s task COMMAND --help\n", os.Args[0])
}
func taskCreateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] task create", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -authorization STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new task.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -authorization STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `task create --body '{
      "parent_id": "Odio aut enim saepe voluptatem.",
      "title": "Error odio corporis animi praesentium quasi."
   }' --authorization "Quae asperiores."`)
}

func taskListUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] task list", os.Args[0])
	fmt.Fprint(os.Stderr, " -parent-id STRING")
	fmt.Fprint(os.Stderr, " -recursive BOOL")
	fmt.Fprint(os.Stderr, " -authorization STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all tasks.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -parent-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -recursive BOOL: `)
	fmt.Fprintln(os.Stderr, `    -authorization STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `task list --parent-id "Sit voluptatum unde voluptatem laborum odio." --recursive true --authorization "Facilis quia voluptas autem molestiae sint."`)
}

func taskUpdateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] task update", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -task-id STRING")
	fmt.Fprint(os.Stderr, " -authorization STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update a task.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -task-id STRING: The ID of the task`)
	fmt.Fprintln(os.Stderr, `    -authorization STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `task update --body '{
      "estimated_time": 3455221692150320965,
      "next_id": "Dolores occaecati.",
      "parent_id": "Ratione consequatur quis ullam quisquam necessitatibus.",
      "status": "Qui qui error eos.",
      "title": "Dolorum est."
   }' --task-id "Omnis eum aut recusandae vitae quo." --authorization "Accusamus explicabo laborum ut neque."`)
}

func taskDeleteUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] task delete", os.Args[0])
	fmt.Fprint(os.Stderr, " -task-id STRING")
	fmt.Fprint(os.Stderr, " -authorization STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete a task.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -task-id STRING: The ID of the task`)
	fmt.Fprintln(os.Stderr, `    -authorization STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `task delete --task-id "Deleniti nihil consequatur vel quia odit perferendis." --authorization "Voluptatem qui."`)
}
