// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task HTTP client types
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package client

import (
	task "github.com/neatflowcv/focus/gen/task"
	taskviews "github.com/neatflowcv/focus/gen/task/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "task" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// The parent ID of the task
	ParentID *string `form:"parent_id,omitempty" json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// The title of the task
	Title string `form:"title" json:"title" xml:"title"`
}

// CreateResponseBody is the type of the "task" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// The ID of the task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The parent ID of the task
	ParentID *string `form:"parent_id,omitempty" json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// The title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The timestamp when the task was created
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The status of the task
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// The order of the task
	Order *float64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// ListResponseBody is the type of the "task" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TaskdetailResponse

// TaskdetailResponse is used to define fields on response body types.
type TaskdetailResponse struct {
	// The ID of the task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The parent ID of the task
	ParentID *string `form:"parent_id,omitempty" json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// The title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The timestamp when the task was created
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The status of the task
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// The order of the task
	Order *float64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "task" service.
func NewCreateRequestBody(p *task.TaskInput) *CreateRequestBody {
	body := &CreateRequestBody{
		ParentID: p.ParentID,
		Title:    p.Title,
	}
	return body
}

// NewCreateTaskdetailOK builds a "task" service "create" endpoint result from
// a HTTP "OK" response.
func NewCreateTaskdetailOK(body *CreateResponseBody) *taskviews.TaskdetailView {
	v := &taskviews.TaskdetailView{
		ID:        body.ID,
		ParentID:  body.ParentID,
		Title:     body.Title,
		CreatedAt: body.CreatedAt,
		Status:    body.Status,
		Order:     body.Order,
	}

	return v
}

// NewListTaskdetailCollectionOK builds a "task" service "list" endpoint result
// from a HTTP "OK" response.
func NewListTaskdetailCollectionOK(body ListResponseBody) taskviews.TaskdetailCollectionView {
	v := make([]*taskviews.TaskdetailView, len(body))
	for i, val := range body {
		v[i] = unmarshalTaskdetailResponseToTaskviewsTaskdetailView(val)
	}

	return v
}

// ValidateTaskdetailResponse runs the validations defined on TaskdetailResponse
func ValidateTaskdetailResponse(body *TaskdetailResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	return
}
