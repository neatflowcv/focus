// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	task "github.com/neatflowcv/focus/gen/task"
)

// BuildCreatePayload builds the payload for the task create endpoint from CLI
// flags.
func BuildCreatePayload(taskCreateBody string, taskCreateAuthorization string) (*task.TaskInput, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(taskCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"parent_id\": \"Et quae omnis quia est.\",\n      \"title\": \"Explicabo provident ut quis nesciunt perferendis.\"\n   }'")
		}
	}
	var authorization string
	{
		authorization = taskCreateAuthorization
	}
	v := &task.TaskInput{
		ParentID: body.ParentID,
		Title:    body.Title,
	}
	v.Authorization = authorization

	return v, nil
}

// BuildListPayload builds the payload for the task list endpoint from CLI
// flags.
func BuildListPayload(taskListParentID string, taskListRecursive string, taskListAuthorization string) (*task.ListPayload, error) {
	var err error
	var parentID *string
	{
		if taskListParentID != "" {
			parentID = &taskListParentID
		}
	}
	var recursive *bool
	{
		if taskListRecursive != "" {
			var val bool
			val, err = strconv.ParseBool(taskListRecursive)
			recursive = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for recursive, must be BOOL")
			}
		}
	}
	var authorization string
	{
		authorization = taskListAuthorization
	}
	v := &task.ListPayload{}
	v.ParentID = parentID
	v.Recursive = recursive
	v.Authorization = authorization

	return v, nil
}
