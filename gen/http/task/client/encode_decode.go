// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	task "github.com/neatflowcv/focus/gen/task"
	taskviews "github.com/neatflowcv/focus/gen/task/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "task" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTaskPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the task create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.CreateTaskInput)
		if !ok {
			return goahttp.ErrInvalidType("task", "create", "*task.CreateTaskInput", v)
		}
		{
			head := p.Authorization
			req.Header.Set("authorization", head)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("task", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the task
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "create", err)
			}
			p := NewCreatetaskoutputViewOK(&body)
			view := "default"
			vres := &taskviews.Createtaskoutput{Projected: p, View: view}
			if err = taskviews.ValidateCreatetaskoutput(vres); err != nil {
				return nil, goahttp.ErrValidationError("task", "create", err)
			}
			res := task.NewCreatetaskoutput(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "create", err)
			}
			err = ValidateCreateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "create", err)
			}
			return nil, NewCreateInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "task" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTaskPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the task list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("task", "list", "*task.ListPayload", v)
		}
		{
			head := p.Authorization
			req.Header.Set("authorization", head)
		}
		values := req.URL.Query()
		if p.ParentID != nil {
			values.Add("parent_id", *p.ParentID)
		}
		if p.Recursive != nil {
			values.Add("recursive", fmt.Sprintf("%v", *p.Recursive))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the task list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeListResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "list", err)
			}
			p := NewListTaskdetailCollectionOK(body)
			view := "default"
			vres := taskviews.TaskdetailCollection{Projected: p, View: view}
			if err = taskviews.ValidateTaskdetailCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("task", "list", err)
			}
			res := task.NewTaskdetailCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "list", err)
			}
			err = ValidateListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "list", err)
			}
			return nil, NewListUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "list", err)
			}
			err = ValidateListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "list", err)
			}
			return nil, NewListInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "task" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*task.TaskUpdateInput)
		if !ok {
			return nil, goahttp.ErrInvalidType("task", "update", "*task.TaskUpdateInput", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTaskPath(taskID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the task update
// server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.TaskUpdateInput)
		if !ok {
			return goahttp.ErrInvalidType("task", "update", "*task.TaskUpdateInput", v)
		}
		{
			head := p.Authorization
			req.Header.Set("authorization", head)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("task", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the task
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "TaskNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "update", err)
			}
			p := NewUpdateTaskdetailOK(&body)
			view := "default"
			vres := &taskviews.Taskdetail{Projected: p, View: view}
			if err = taskviews.ValidateTaskdetail(vres); err != nil {
				return nil, goahttp.ErrValidationError("task", "update", err)
			}
			res := task.NewTaskdetail(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusNotFound:
			var (
				body UpdateTaskNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "update", err)
			}
			err = ValidateUpdateTaskNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "update", err)
			}
			return nil, NewUpdateTaskNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "update", err)
			}
			err = ValidateUpdateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "update", err)
			}
			return nil, NewUpdateInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "task" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*task.TaskDeleteInput)
		if !ok {
			return nil, goahttp.ErrInvalidType("task", "delete", "*task.TaskDeleteInput", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTaskPath(taskID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the task delete
// server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.TaskDeleteInput)
		if !ok {
			return goahttp.ErrInvalidType("task", "delete", "*task.TaskDeleteInput", v)
		}
		{
			head := p.Authorization
			req.Header.Set("authorization", head)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the task
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "TaskNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusNotFound:
			var (
				body DeleteTaskNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "delete", err)
			}
			err = ValidateDeleteTaskNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "delete", err)
			}
			return nil, NewDeleteTaskNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "delete", err)
			}
			err = ValidateDeleteInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "delete", err)
			}
			return nil, NewDeleteInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTaskdetailResponseToTaskviewsTaskdetailView builds a value of type
// *taskviews.TaskdetailView from a value of type *TaskdetailResponse.
func unmarshalTaskdetailResponseToTaskviewsTaskdetailView(v *TaskdetailResponse) *taskviews.TaskdetailView {
	res := &taskviews.TaskdetailView{
		ID:            v.ID,
		ParentID:      v.ParentID,
		Title:         v.Title,
		Status:        v.Status,
		IsLeaf:        v.IsLeaf,
		CreatedAt:     v.CreatedAt,
		CompletedAt:   v.CompletedAt,
		StartedAt:     v.StartedAt,
		LeadTime:      v.LeadTime,
		EstimatedTime: v.EstimatedTime,
		ActualTime:    v.ActualTime,
	}

	return res
}
