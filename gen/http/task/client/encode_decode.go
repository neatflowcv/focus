// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	task "github.com/neatflowcv/focus/gen/task"
	taskviews "github.com/neatflowcv/focus/gen/task/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "task" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTaskPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the task create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.TaskInput)
		if !ok {
			return goahttp.ErrInvalidType("task", "create", "*task.TaskInput", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("task", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the task
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "create", err)
			}
			p := NewCreateTaskdetailOK(&body)
			view := "default"
			vres := &taskviews.Taskdetail{Projected: p, View: view}
			if err = taskviews.ValidateTaskdetail(vres); err != nil {
				return nil, goahttp.ErrValidationError("task", "create", err)
			}
			res := task.NewTaskdetail(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "task" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTaskPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the task list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("task", "list", "*task.ListPayload", v)
		}
		values := req.URL.Query()
		if p.ParentID != nil {
			values.Add("parent_id", *p.ParentID)
		}
		if p.Recursive != nil {
			values.Add("recursive", fmt.Sprintf("%v", *p.Recursive))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the task list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "list", err)
			}
			p := NewListTaskdetailCollectionOK(body)
			view := "default"
			vres := taskviews.TaskdetailCollection{Projected: p, View: view}
			if err = taskviews.ValidateTaskdetailCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("task", "list", err)
			}
			res := task.NewTaskdetailCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTaskdetailResponseToTaskviewsTaskdetailView builds a value of type
// *taskviews.TaskdetailView from a value of type *TaskdetailResponse.
func unmarshalTaskdetailResponseToTaskviewsTaskdetailView(v *TaskdetailResponse) *taskviews.TaskdetailView {
	res := &taskviews.TaskdetailView{
		ID:        v.ID,
		ParentID:  v.ParentID,
		Title:     v.Title,
		CreatedAt: v.CreatedAt,
		Status:    v.Status,
		Order:     v.Order,
	}

	return res
}
