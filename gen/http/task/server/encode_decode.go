// Code generated by goa v3.22.5, DO NOT EDIT.
//
// task HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/neatflowcv/focus/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	task "github.com/neatflowcv/focus/gen/task"
	taskviews "github.com/neatflowcv/focus/gen/task/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the task
// create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*taskviews.Taskdetail)
		enc := encoder(ctx, w)
		body := NewCreateResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the task create
// endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*task.TaskInput, error) {
	return func(r *http.Request) (*task.TaskInput, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateTaskInput(&body)

		return payload, nil
	}
}

// EncodeListResponse returns an encoder for responses returned by the task
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(taskviews.TaskdetailCollection)
		enc := encoder(ctx, w)
		body := NewTaskdetailResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the task list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*task.ListPayload, error) {
	return func(r *http.Request) (*task.ListPayload, error) {
		var (
			parentID  *string
			recursive *bool
			err       error
		)
		qp := r.URL.Query()
		parentIDRaw := qp.Get("parent_id")
		if parentIDRaw != "" {
			parentID = &parentIDRaw
		}
		{
			recursiveRaw := qp.Get("recursive")
			if recursiveRaw != "" {
				v, err2 := strconv.ParseBool(recursiveRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("recursive", recursiveRaw, "boolean"))
				}
				recursive = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListPayload(parentID, recursive)

		return payload, nil
	}
}

// marshalTaskviewsTaskdetailViewToTaskdetailResponse builds a value of type
// *TaskdetailResponse from a value of type *taskviews.TaskdetailView.
func marshalTaskviewsTaskdetailViewToTaskdetailResponse(v *taskviews.TaskdetailView) *TaskdetailResponse {
	res := &TaskdetailResponse{
		ID:        *v.ID,
		ParentID:  v.ParentID,
		Title:     *v.Title,
		CreatedAt: *v.CreatedAt,
		Status:    *v.Status,
		Order:     *v.Order,
	}

	return res
}
